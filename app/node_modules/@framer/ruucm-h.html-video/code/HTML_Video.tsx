import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import styled from "styled-components";
import { url } from "framer/resource";

const Wrap = styled.div``;

enum SrcType {
  Video = "Video",
  Url = "URL"
}

// Define type of property
interface Props {
  width: number;
  height: number;
  srcType: SrcType;
  video: string;
  url: string;
  playerState: string;
  autoplay: boolean;
  controls: boolean;
  loop: boolean;
  muted: boolean;
}

let vidRef = null;
export class HTML_Video extends React.Component<Props> {
  // Set default properties
  static defaultProps = {
    srcType: SrcType.Video,
    url: url("/assets/apple-fish.mp4"),
    video: url("/assets/apple-fish.mp4"),
    width: 375,
    height: 206,
    autoplay: false,
    controls: false,
    loop: true,
    muted: true,
    currentTime: 0
  };

  // Items shown in property panel
  static propertyControls: PropertyControls = {
    srcType: {
      type: ControlType.SegmentedEnum,
      title: "Source",
      options: [SrcType.Url, SrcType.Video]
    },
    url: {
      type: ControlType.String,
      title: " ",
      placeholder: ".../example.mp4",
      hidden(props) {
        return props.srcType === SrcType.Video;
      }
    },
    video: {
      type: ControlType.File,
      title: " ",
      allowedFileTypes: ["mp4", "mov"],
      hidden(props) {
        return props.srcType === SrcType.Url;
      }
    },
    playerState: {
      type: ControlType.SegmentedEnum,
      defaultValue: "play",
      options: ["play", "pause", "stop"],
      optionTitles: ["▶", "❙❙", "◼"],
      title: "Player State"
    },
    controls: {
      type: ControlType.Boolean,
      title: "Controls"
    },
    loop: { type: ControlType.Boolean, title: "Loop" },
    muted: { type: ControlType.Boolean, title: "Muted" },
    currentTime: {
      type: ControlType.Number,
      title: "Time",
      defaultValue: 5,
      min: 0,
      max: 120
    }
  };

  play(targetVideo) {
    targetVideo.play();
  }
  pause(targetVideo) {
    targetVideo.pause();
  }
  stop(targetVideo) {
    targetVideo.pause();
    targetVideo.load();
  }

  changeTime(targetVideo, newTime) {
    if (targetVideo.duration >= newTime && newTime >= 0)
      targetVideo.currentTime = newTime;
    else console.log("It passed Video's Duration");
  }

  componentDidMount() {
    setTimeout(() => {
      var myVideo = vidRef;
      this.changeTime(myVideo, this.props.currentTime);
    }, 1000);
  }

  componentWillReceiveProps(nextProps) {
    var myVideo = vidRef;
    if (this.props.playerState != nextProps.playerState) {
      switch (nextProps.playerState) {
        case "play":
          this.play(myVideo);
          break;
        case "pause":
          this.pause(myVideo);
          break;
        case "stop":
          this.stop(myVideo);
          this.pause(myVideo);
          break;

        default:
          break;
      }
    }

    if (this.props.currentTime != nextProps.currentTime) {
      this.changeTime(myVideo, nextProps.currentTime);
    }
    if (this.props.video != nextProps.video || this.props.url != nextProps.url ) this.stop(myVideo); // reload video when video source changed
  }

  render() {
    const {
      width,
      height,
      autoplay,
      controls,
      loop,
      muted,
      srcType,
      url,
      video,
      playerState
    } = this.props;
    return (
      <Wrap
        style={{
          width: width,
          height: height
        }}
      >
        <video
          id="video1"
          ref={el => (vidRef = el)}
          autoPlay={playerState == "play"}
          controls={controls}
          loop={loop}
          muted={muted}
          playsInline
          style={{
            width: "100%",
            height: "100%",
            objectFit: "cover",
            objectPosition: "50% 50%"
          }}
        >
          {console.log("video", video)}
          <source
            src={
              srcType === SrcType.Url
                ? url
                : decodeURIComponent(video.replace("/preview", ""))
            }
          />
        </video>
      </Wrap>
    );
  }
}
