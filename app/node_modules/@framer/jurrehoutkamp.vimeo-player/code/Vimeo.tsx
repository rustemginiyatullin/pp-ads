import * as React from "react";
import {
  Frame,
  FramerEvent,
  Animatable,
  PropertyControls,
  ControlType
} from "framer";

interface Props {
  url: string;
  parentSize: { width: number; height: number };
}

export class Vimeo extends React.Component<Props> {
  static defaultProps = {
    url: "274713351",
    width: 230,
    height: 120
  };

  static propertyControls: PropertyControls<Props> = {
    url: { type: ControlType.String, title: "Video ID" }
  };

  render() {
    const identifier = Vimeo.guessIdentifier(this.props.url) || "none";
    const width = Animatable.getNumber(this.props.width);
    const height = Animatable.getNumber(this.props.height);
    return (
      <iframe
        width={width}
        height={height}
        frameBorder={0}
        src={`https://player.vimeo.com/video/${identifier}`}
      />
    );
  }

  private static guessIdentifier = (urlMaybe: string): string | null => {
    if (!urlMaybe) return null;

    let identifier = "";

    const watchPrefix = "https://player.vimeo.com/video/";
    const watchIndex = urlMaybe.indexOf(watchPrefix);
    if (watchIndex >= 0) {
      identifier = urlMaybe.substring(watchIndex + watchPrefix.length);
    } else {
      const embedPrefix = "https://vimeo.com/video/";
      const embedIndex = urlMaybe.indexOf(embedPrefix);
      if (embedIndex >= 0) {
        identifier = urlMaybe.substring(embedIndex + embedPrefix.length);
      } else {
        const shortenedPrefix = "https://player.vimeo.com/video/";
        const shortenedIndex = urlMaybe.indexOf(shortenedPrefix);
        if (shortenedIndex >= 0) {
          identifier = urlMaybe.substring(
            shortenedIndex + shortenedPrefix.length
          );
        } else {
          // Everything else
          identifier = urlMaybe;
        }
      }
    }

    // Strip off the query string, if any
    const queryIndex = identifier.indexOf("?");
    if (queryIndex >= 0) {
      identifier = identifier.substring(0, queryIndex);
    }

    // What's left might be an identifier
    return identifier.match(/[\w_]+/) ? identifier : null;
  };
}
