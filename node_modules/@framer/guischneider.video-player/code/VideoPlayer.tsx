import * as React from "react"
import { addPropertyControls, ControlType, Frame, RenderTarget } from "framer"

enum SrcType {
    Video = "Video",
    Url = "URL",
}

VideoPlayer.defaultProps = {
    width: 320,
    height: 180,
    srcType: SrcType.Url,
    url: "https://www.krijnrijshouwer.com/file/example.mp4",
    video: "",
    autoplay: true,
    loop: true,
    muted: true,
    controls: true,
    radius: 4,
    autoplayvimeo: "1",
    loopvimeo: "1",
    vimeoNumber: "317838554",
    ytEnd: "",
    ytStart: "0",
    ytid: "8Hoe9by0wNc",
}

export function VideoPlayer(props) {
    if (RenderTarget.current() != RenderTarget.preview) {
        props.controls = false
        props.muted = true
    }
    if (props.srcType === "Youtube") {
        return (
            <Frame
                style={{
                    width: "100%",
                    height: "100%",
                    overflow: "hidden",
                    backgroundColor: "#000",
                    color: "#333",
                    fontSize: "14px",
                    borderRadius: props.radius,
                }}
            >
                <iframe
                    style={{
                        width: "100%",
                        height: "100%",
                        position: "absolute",
                        borderStyle: "none",
                        left: 0,
                        top: 0,
                        overflow: "hidden",
                    }}
                    id="ytplayer"
                    width="720"
                    height="405"
                    src={`https://www.youtube.com/embed/${
                        props.ytid
                    }??autoplay=${props.autoplayvimeo}&cc_load_policy=${
                        props.loadpolicy
                    }&disablekb=1&enablejsapi=1&end=${props.ytEnd}&loop=${
                        props.loopvimeo
                    }&modestbranding=0&start=${props.ytStart}&color=white`}
                />
            </Frame>
        )
    }
    if (props.srcType === "Vimeo") {
        return (
            <Frame
                style={{
                    width: "100%",
                    height: "100%",
                    overflow: "hidden",
                    backgroundColor: "#000",
                    color: "#333",
                    fontSize: "14px",
                    borderRadius: props.radius,
                }}
            >
                <div
                    style={{
                        padding: "56.25% 0 0 0",
                        position: "relative",
                        overflow: "hidden",
                    }}
                >
                    <iframe
                        style={{
                            width: "100%",
                            height: "100%",
                            position: "absolute",
                            borderStyle: "none",
                            left: 0,
                            top: 0,
                            overflow: "hidden",
                        }}
                        src={`https://player.vimeo.com/video/${
                            props.vimeoNumber
                        }?autoplay=${props.autoplayvimeo}&loop=${
                            props.loopvimeo
                        }`}
                        // width="100%"
                        // height="100%"
                    />
                </div>
                <script src="https://player.vimeo.com/api/player.js" />
            </Frame>
        )
    }
    return (
        <Frame
            style={{
                width: "100%",
                height: "100%",
                overflow: "hidden",
                backgroundColor: "#000",
                color: "#333",
                fontSize: "14px",
                borderRadius: props.radius,
            }}
        >
            <video
                // key= `${props.autoplay}`
                autoPlay={props.autoplay}
                loop={props.loop}
                muted={props.muted}
                controls={props.controls}
                preload="auto"
                playsInline
                style={{
                    width: "100%",
                    height: "100%",
                    objectFit: "cover",
                    objectPosition: "50% 50%",
                    overflow: "hidden",
                }}
                src={props.srcType === SrcType.Url ? props.url : props.video}
            />
            Your browser does not support HTML5 video.
        </Frame>
    )
}

addPropertyControls(VideoPlayer, {
    srcType: {
        type: ControlType.Enum,
        title: "Source",
        optionTitles: ["URL", "File", "Vimeo", "Youtube"],
        options: [SrcType.Url, SrcType.Video, "Vimeo", "Youtube"],
    },
    url: {
        type: ControlType.String,
        title: " ",
        placeholder: ".../example.mp4",
        hidden(props) {
            return (
                props.srcType === "Vimeo" ||
                props.srcType === SrcType.Video ||
                props.srcType === "Youtube"
            )
        },
    },
    video: {
        type: ControlType.File,
        title: " ",
        allowedFileTypes: ["mp4", "mov"],
        hidden(props) {
            return (
                props.srcType === "Vimeo" ||
                props.srcType === SrcType.Url ||
                props.srcType === "Youtube"
            )
        },
    },
    vimeoNumber: {
        type: ControlType.String,
        title: "Vimeo Number",
        hidden(props) {
            return (
                props.srcType === SrcType.Video ||
                props.srcType === SrcType.Url ||
                props.srcType === "Youtube"
            )
        },
    },
    ytid: {
        type: ControlType.String,
        title: "Video ID",
        hidden(props) {
            return (
                props.srcType === SrcType.Video ||
                props.srcType === SrcType.Url ||
                props.srcType === "Vimeo"
            )
        },
    },
    autoplay: {
        type: ControlType.Boolean,
        title: "Play",
        hidden(props) {
            return props.srcType === "Vimeo" || props.srcType === "Youtube"
        },
    },
    autoplayvimeo: {
        type: ControlType.SegmentedEnum,
        title: "Play",
        optionTitles: ["True", "False"],
        options: ["1", "0"],
        hidden(props) {
            return (
                props.srcType === SrcType.Video ||
                props.srcType === SrcType.Url ||
                props.srcType === "Youtube"
            )
        },
    },
    loop: {
        type: ControlType.Boolean,
        title: "Loop",
        hidden(props) {
            return props.srcType === "Vimeo" || props.srcType === "Youtube"
        },
    },
    loopvimeo: {
        type: ControlType.SegmentedEnum,
        title: "Loop",
        optionTitles: ["True", "False"],
        options: ["1", "0"],
        hidden(props) {
            return (
                props.srcType === SrcType.Video ||
                props.srcType === SrcType.Url ||
                props.srcType === "Youtube"
            )
        },
    },
    muted: {
        type: ControlType.Boolean,
        title: "Muted",
        hidden(props) {
            return props.srcType === "Vimeo" || props.srcType === "Youtube"
        },
    },
    controls: {
        type: ControlType.Boolean,
        title: "Controls",
        hidden(props) {
            return props.srcType === "Vimeo" || props.srcType === "Youtube"
        },
    },
    ytStart: {
        type: ControlType.String,
        title: "Start @",
        defaultValue: "0",
    },
    ytEnd: {
        type: ControlType.String,
        title: "End @",
        defaultValue: "",
    },
    radius: {
        type: ControlType.Number,
        defaultValue: 4,
        max: 80,
        min: 0,
    },
})
